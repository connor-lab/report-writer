#!/usr/bin/env python3

import json
import collections 
from prettytable import PrettyTable

def extract_subtype_information(input_json):
    try:
        subtype = input_json['subtypeText']
    except:
        print("Subtype data not found")
    return subtype

def create_subtype_table(sampleID, input_json):
    try:
        subtype = extract_subtype_information(input_json)
        subtype_table = PrettyTable()
        subtype_table.field_names = ['Sample', 'Subtype']
        subtype_table.add_row([sampleID , subtype])
    except:
        print("Failed to create subtype table")
    return subtype_table

def extract_gene_sequences(input_json):
    try:
        nucleic_acid = {}
        for gene in input_json['alignedGeneSequences']:
            genename = gene['gene']['name']
            nucleic_acid[genename] = gene['alignedNAs']
    except:
        print("Nucleic acid alignment not found")
    return nucleic_acid


def extract_aa_sequences(input_json):
    try:
        amino_acid = {}
        for gene in input_json['alignedGeneSequences']:
            genename = gene['gene']['name']
            amino_acid[genename] = gene['alignedAAs']
    except:
        print("Amino acid alignment not found")
    return amino_acid


def extract_lengths(input_json):
    try:
        gene_lengths = {}
        for gene in input_json['alignedGeneSequences']:
            genename = gene['gene']['name']
            gene_lengths[genename] = { 'firstAA' : gene['firstAA'], 
                                        'lastAA' : gene['lastAA'],
                                        'length' : gene['gene']['length'] }
    except:
        print('Gene length data not found')
    return gene_lengths

def extract_resistance_summary(input_json):
    try:
        drug_list = {}
        for drug in input_json['drugResistance'][0]['drugScores']:
            genename = input_json['drugResistance'][0]['gene']['name']
            drugclass = drug['drugClass']['name']
            drugname = drug['drug']['name']
            nameclass = genename + '-' + drugclass + '-' + drugname
            drugtext = drug['text']
            drug_list[nameclass] = drugtext
        for drug in input_json['drugResistance'][1]['drugScores']:
            genename = input_json['drugResistance'][1]['gene']['name']
            drugclass = drug['drugClass']['name']
            drugname = drug['drug']['name']
            nameclass = genename + '-' + drugclass + '-' + drugname
            drugtext = drug['text']
            drug_list[nameclass] = drugtext
        for drug in input_json['drugResistance'][2]['drugScores']:
            genename = input_json['drugResistance'][2]['gene']['name']
            drugclass = drug['drugClass']['name']
            drugname = drug['drug']['name']
            nameclass = genename + '-' + drugclass + '-' + drugname
            drugtext = drug['text']
            drug_list[nameclass] = drugtext
        gene_resistance_summary = collections.defaultdict(dict)
        for key,value in drug_list.items():
            gene = key.split('-')[0]
            drugclass = key.split('-', 1)[1]
            gene_resistance_summary[gene][drugclass] = value
        gene_resistance_summary = dict(gene_resistance_summary)
    except:
       print('Drug resistance summary data not found')
   
    return gene_resistance_summary

def create_resistance_summary_table(input_json):
    try:
        sequence_lengths = extract_lengths(input_json)
        drug_resistance_summary = extract_resistance_summary(input_json)
        longformatgene = { 'IN' : 'Integrase', 
                           'PR' : 'Protease', 
                           'RT' : 'Reverse Transcriptase' }
        resistence_table_list = []
        for gene,drugs in drug_resistance_summary.items():
            resistance_summary_table = PrettyTable()
            resistance_summary_table.field_names = ['Drug Class', 'Drug', 'Status']
            for drug,status in drugs.items():
                drugclass = drug.split('-')[0]
                drugname = drug.split('-')[1]
                resistance_summary_table.add_row([drugclass, drugname, status])
            
            firstAA = str(sequence_lengths[gene]['firstAA'])
            lastAA = str(sequence_lengths[gene]['lastAA'])
            genelength = str(sequence_lengths[gene]['length'])
            table_title = longformatgene[gene] + " [Codons analysed " + firstAA + "-" + lastAA + "/" + genelength + "]"
            
            resistance_summary_table.title = table_title 
            resistance_summary_table.align = "l"

            resistence_table_list.append(resistance_summary_table)
    except:
        print('Failed to make resistance summary tables')

    return resistence_table_list



def main():
    with open('example_json/example.good.json') as f:
        data = json.load(f)
        sierrapy_json = data[0]
    for i in create_resistance_summary_table(sierrapy_json):
        print(i.get_string() + '\n')


if __name__ == "__main__":
    main()
