#!/usr/bin/env python3

from utils import makehash

import argparse
import json
from prettytable import PrettyTable


def extract_subtype_information(input_json):
    try:
        subtype = input_json['subtypeText']
    except:
        print("Subtype data not found")
    return subtype



def create_subtype_table(sampleID, input_json):
    try:
        subtype = extract_subtype_information(input_json)
        subtype_table = PrettyTable()
        subtype_table.field_names = ['Sample', 'Subtype']
        subtype_table.add_row([sampleID , subtype])
        subtype_table.align = "l"
    except:
        print("Failed to create subtype table")
    return subtype_table



def extract_gene_sequences(input_json):
    try:
        nucleic_acid = {}
        for gene in input_json['alignedGeneSequences']:
            genename = gene['gene']['name']
            nucleic_acid[genename] = gene['alignedNAs']
    except:
        print("Nucleic acid alignment not found")
    return nucleic_acid



def extract_aa_sequences(input_json):
    try:
        amino_acid = {}
        for gene in input_json['alignedGeneSequences']:
            genename = gene['gene']['name']
            amino_acid[genename] = gene['alignedAAs']
    except:
        print("Amino acid alignment not found")
    return amino_acid



def extract_lengths(input_json):
    try:
        gene_lengths = {}
        for gene in input_json['alignedGeneSequences']:
            genename = gene['gene']['name']
            gene_lengths[genename] = { 'firstAA' : gene['firstAA'], 
                                        'lastAA' : gene['lastAA'],
                                        'length' : gene['gene']['length'] }
    except:
        print('Gene length data not found')
    return gene_lengths


def extract_resistance_summary(input_json):
    try:
        gene_resistance_summary = makehash()
        for i in input_json['drugResistance']:
            for j in i['drugScores']:
                text = j['text']
                drug = j['drug']['name']
                drugclass = j['drugClass']['name']
                gene = i['gene']['name']
                gene_resistance_summary[gene][drugclass][drug] = text
    except:
        print("Failed to parse drug resistance information")

    return gene_resistance_summary


def create_resistance_summary_table(input_json):
    try:
        sequence_lengths = extract_lengths(input_json)
        drug_resistance_summary = extract_resistance_summary(input_json)
        longformatgene = { 'IN' : 'Integrase', 
                           'PR' : 'Protease', 
                           'RT' : 'Reverse Transcriptase' }
        resistance_table_list = []
        for gene,drugclass in drug_resistance_summary.items():
            resistance_summary_table = PrettyTable()
            resistance_summary_table.field_names = ['Drug Class', 'Drug', 'Status']
            for drugclass,drug in drugclass.items():
                for drug,status in drug.items():
                    resistance_summary_table.add_row([drugclass, drug, status])
            
            firstAA = str(sequence_lengths[gene]['firstAA'])
            lastAA = str(sequence_lengths[gene]['lastAA'])
            genelength = str(sequence_lengths[gene]['length'])
            table_title = longformatgene[gene] + " [Codons analysed " + firstAA + "-" + lastAA + "/" + genelength + "]"
            resistance_summary_table.title = table_title 
            resistance_summary_table.align = "l"

            resistance_table_list.append(resistance_summary_table)
    except:
        print('Failed to make resistance summary tables')  
    return resistance_table_list


def extract_drug_resistance_mutations(input_json):
    try:
        DRM_dict = makehash()
        for i in input_json['drugResistance']:
            if 'PR' in i['gene']['name']:
                for j in i['drugScores']:
                    for k in j['partialScores']:
                        for l in k['mutations']:
                            for m in l['comments']:
                                mut_type = l['primaryType']
                                mutation = l['text']
                                drugclass = j['drugClass']['name']
                                comment = m['text']
                                DRM_dict[drugclass][mut_type][mutation] = comment 
            else:
                for j in i['drugScores']:
                    for k in j['partialScores']:
                        for l in k['mutations']:
                            for m in l['comments']:
                                mutation = l['text']
                                drugclass = j['drugClass']['name']
                                comment = m['text']
                                DRM_dict[drugclass][mutation] = comment
    except:
       print("Failed to extract DRMs")
    return DRM_dict

def extract_all_mutations(input_json):
    try:
        mut_dict = {}
        for i in input_json['alignedGeneSequences']:
            gene = i['gene']['name']
            mut_list = []
            for j in i['mutations']:
                consensus = str(j['consensus'])
                position = str(j['position'])
                mutation = str(j['AAs'])
                mut_string = consensus + position + mutation
                mut_list.append(mut_string)
            mut_dict[gene] = mut_list
    except:
        print("Failed to extract non-DRM mutations")
    return mut_dict

def main(args):
    with open(args.sierrapy_json) as f:
        data = json.load(f)
        sierrapy_json = data[0]
    print(create_subtype_table(args.sample_id, sierrapy_json))
    for i in create_resistance_summary_table(sierrapy_json):
        print(i)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description = 'Turns SierraPy JSON into useful output')
    parser.add_argument('sierrapy_json', help='JSON file from SierraPy program')
    parser.add_argument('sample_id', help='Sample ID')
    args = parser.parse_args()
    main(args)
